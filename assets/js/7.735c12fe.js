(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{581:function(s,t,a){s.exports=a.p+"assets/img/slice-1.a4f0a34a.png"},582:function(s,t,a){s.exports=a.p+"assets/img/slice-2.67999967.png"},583:function(s,t,a){s.exports=a.p+"assets/img/slice-3.1251c095.png"},584:function(s,t,a){s.exports=a.p+"assets/img/slice-4.a563321e.png"},585:function(s,t,a){s.exports=a.p+"assets/img/slice-5.c76d4f03.png"},586:function(s,t,a){s.exports=a.p+"assets/img/slice-6.d264fd52.png"},587:function(s,t,a){s.exports=a.p+"assets/img/slice-7.ec8627be.png"},588:function(s,t,a){s.exports=a.p+"assets/img/slice-8.de37ef90.png"},589:function(s,t,a){s.exports=a.p+"assets/img/slice-9.9f6f007d.png"},590:function(s,t,a){s.exports=a.p+"assets/img/slice-10.630a6964.png"},591:function(s,t,a){s.exports=a.p+"assets/img/slice-11.bb9375c8.png"},609:function(s,t,a){"use strict";a.r(t);var n=a(17),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("援引自："),n("a",{attrs:{href:"https://mp.weixin.qq.com/s/5un37cl6adUsUTI2jGdbCg",target:"_blank",rel:"noopener noreferrer"}},[s._v("幼麟实验室"),n("OutboundLink")],1)]),s._v(" "),n("h2",{attrs:{id:"slice-切片"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#slice-切片"}},[s._v("#")]),s._v(" slice 切片")]),s._v(" "),n("p",[n("img",{attrs:{src:a(581),alt:"图片"}})]),s._v(" "),n("h3",{attrs:{id:"_1-slice类型结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-slice类型结构"}},[s._v("#")]),s._v(" 1. slice类型结构")]),s._v(" "),n("p",[s._v("slice由三个部分组成：")]),s._v(" "),n("ul",[n("li",[s._v("data：元素存哪里")]),s._v(" "),n("li",[s._v("len：存了多少个元素")]),s._v(" "),n("li",[s._v("cap：可以存多少个元素")])]),s._v(" "),n("p",[s._v("举个例子，声明一个整型slice：")]),s._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" ints "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v("\n")])])]),n("p",[s._v("变量ints的结构如下图所示：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(582),alt:"图片"}})]),s._v(" "),n("p",[s._v("slice的元素要存在一段连续的内存中，实际上就是个数组 ，data就是这个底层数组的起始地址。但目前只分配了这个切片结构，还没有分配底层数组，所以data为nil，存储元素个数len为0，容量cap也为0。")]),s._v(" "),n("h3",{attrs:{id:"_2-make-for-slice"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-make-for-slice"}},[s._v("#")]),s._v(" 2. make for slice")]),s._v(" "),n("p",[s._v("如果通过make的方式定义这个变量，不仅会分配这三部分结构，还会开辟一段内存作为它的底层数组。")]),s._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" ints "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),n("p",[s._v("这里make会为ints开辟一段容纳5个整型元素的内存,还会把它们初始化为整型的默认值 0。但是目前这个slice变量只存储了两个元素，所以变量ints的结构如下图所示。")]),s._v(" "),n("p",[n("img",{attrs:{src:a(583),alt:"图片"}})]),s._v(" "),n("p",[s._v("添加元素")]),s._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[s._v("ints "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ints"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),n("p",[s._v("已经存了两个，所以新添加的是第三个，len修改为3。")]),s._v(" "),n("p",[n("img",{attrs:{src:a(584),alt:"图片"}})]),s._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[s._v("ints"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])])]),n("p",[s._v("已经存储的元素是可以安全读写的，但是超出这个范围就属于"),n("strong",[s._v("越界访问，会发生panic。")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(585),alt:"图片"}})]),s._v(" "),n("h3",{attrs:{id:"_3-new-for-slice"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-new-for-slice"}},[s._v("#")]),s._v(" 3. new for slice")]),s._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[s._v(" ps "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),n("p",[s._v("new一个slice变量同样会分配这三部分结构，但它不负责底层数组的分配，所以data=nil，len和cap都是0。new的返回值就是这个slice的指针，即其地址，所以ps它就是个地址。")]),s._v(" "),n("p",[n("img",{attrs:{src:a(586),alt:"图片"}})]),s._v(" "),n("p",[s._v("此时这个slice变量还没有底层数组，像下面这样的操作是不允许的：")]),s._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"eggo"')]),s._v("\n")])])]),n("p",[s._v("其通过***append()*** 为其分配底层array")]),s._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ps "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"eggo"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),n("p",[s._v("通过append的方式添加元素，append就会给它开辟底层数组。如下图所示，这里开辟了一个字符串元素的数组。")]),s._v(" "),n("p",[n("img",{attrs:{src:a(587),alt:"图片"}})]),s._v(" "),n("p",[s._v("注意其中字符串类型由两部分组成，一个内容起始地址，指向字符串内容，还有一个字节长度。")]),s._v(" "),n("h3",{attrs:{id:"_4-底层-array"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-底层-array"}},[s._v("#")]),s._v(" 4. 底层 array")]),s._v(" "),n("p",[s._v("数组，就是同种类型的元素一个挨一个的存储。[]int底层就是int数组，[]string底层就是string数组。但是slice结构中的data，并不是必须指向数组的开头。来看个例子：")]),s._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[s._v("arr "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("p",[s._v("变量arr是容量为10的整型数组（注意数组容量声明了就不能变了）。我们可以把不同的slice关联到同一个数组，如下代码所示：")]),s._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" s1 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" s2 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),n("p",[s._v("s1和s2会共用底层数组arr，s1和s2的具体结构如下图所示：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(588),alt:"图片"}})]),s._v(" "),n("p",[s._v("s1的元素是arr索引1到4 左闭右开，所以1，2，3这3个元素算是添加到s1中了。但是容量却是从s1的data这里开始，到底层数组结束共有9个元素。\nslice访问和修改的都是底层数组的元素，所以**s1[3]就算访问越界了。\n如果修改s1的定义为：")]),s._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" s1 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),n("p",[s._v("或者通过append添加元素来扩大可读写的区间范围:")]),s._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[s._v("s1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),n("p",[s._v("这样就可以访问s1[3]了。")]),s._v(" "),n("h3",{attrs:{id:"_5-底层-array-扩容规则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-底层-array-扩容规则"}},[s._v("#")]),s._v(" 5. 底层 array 扩容规则")]),s._v(" "),n("p",[s._v("再来看s2，s2的元素从索引7开始直到结束，共3个元素，容量也是3。此时\n如果再给s2添加元素时，其底层数组发生扩容。")]),s._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[s._v("s2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),n("p",[n("img",{attrs:{src:a(589),alt:"图片"}})]),s._v(" "),n("p",[s._v("arr这个底层数组是不能用了，得开辟新数组。但是原来的元素要拷过来，还要添加新元素10。元素个数改为4，容量扩到6。这下slice和底层数组的关系都清晰了吧！\n不过，还有个问题，我只添加了一个元素，s2怎么从3扩容到6了呢？那就要看slice的扩容规则了~")]),s._v(" "),n("h4",{attrs:{id:"扩容规则第一步-预估扩容后的容量。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#扩容规则第一步-预估扩容后的容量。"}},[s._v("#")]),s._v(" 扩容规则第一步：预估扩容后的容量。")]),s._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[s._v("ints "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nints "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ints"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),n("p",[s._v("扩容规则有如下几个要素")]),s._v(" "),n("ul",[n("li",[s._v("oldCap：扩容前容量")]),s._v(" "),n("li",[s._v("oldLen：扩容前元素个数")]),s._v(" "),n("li",[s._v("cap：扩容所需最小容量")]),s._v(" "),n("li",[s._v("newCap：预估容量")])]),s._v(" "),n("p",[n("strong",[s._v("Go1.15中，预估容量规则如下：")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(590),alt:"图片"}})]),s._v(" "),n("ol",[n("li",[s._v("如果扩容前的容量翻倍之后还是小于所需最小容量，那么预估容量就等于所需最小容量。")]),s._v(" "),n("li",[s._v("如果不满足第一条，而且扩容前容量小于1024，则直接翻倍。")]),s._v(" "),n("li",[s._v("如果不满足第一条，而且扩容前容量大于等于1024，那就循环扩容四分之一，直到大于等于所需最小容量。\n在上面这个例子中，扩容前容量为2，就算翻倍了还是小于5，所以预估容量就是5。")])]),s._v(" "),n("p",[s._v("**Go1.16中有了些变化，**和1024比较的不再是oldLen，而是oldCap。如下代码所示：")]),s._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1.16")]),s._v("\nnewcap "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" old"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("cap")]),s._v("\ndoublecap "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" newcap "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" newcap\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("cap")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" doublecap "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  newcap "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("cap")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" old"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("cap")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    newcap "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" doublecap\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Check 0 < newcap to detect overflow")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// and prevent an infinite loop.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" newcap "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" newcap "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("cap")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      newcap "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" newcap "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Set newcap to the requested cap when")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// the newcap calculation overflowed.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" newcap "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      newcap "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("cap")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("p",[s._v("到了Go1.18时，又改成不和1024比较了，而是和256比较；并且扩容的增量也有所变化，不再是每次扩容1/4，如下代码所示：")]),s._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//1.18")]),s._v("\nnewcap "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" old"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("cap")]),s._v("\ndoublecap "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" newcap "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" newcap\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("cap")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" doublecap "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  newcap "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("cap")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" threshold "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("256")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" old"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("cap")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" threshold "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    newcap "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" doublecap\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Check 0 < newcap to detect overflow")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// and prevent an infinite loop.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" newcap "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" newcap "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("cap")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Transition from growing 2x for small slices")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// to growing 1.25x for large slices. This formula")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// gives a smooth-ish transition between the two.")]),s._v("\n      newcap "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("newcap "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("threshold"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Set newcap to the requested cap when")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// the newcap calculation overflowed.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" newcap "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      newcap "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("cap")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("h4",{attrs:{id:"扩容规则第二步-预分配内存块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#扩容规则第二步-预分配内存块"}},[s._v("#")]),s._v(" 扩容规则第二步：预分配内存块")]),s._v(" "),n("p",[s._v("预估容量只是预估的元素“个数”，这么多元素需要占用多少内存呢？这就和元素类型挂钩了。\n用预估的容量，乘以元素类型大小，得到的就是所需内存。\n难道直接分配这么多内存就ok了？并不是。")]),s._v(" "),n("p",[n("img",{attrs:{src:a(591),alt:"图片"}})]),s._v(" "),n("p",[s._v("简单来说，是因为在许多编程语言中，申请分配内存并不是直接与操作系统交涉，而是和语言自身实现的内存管理模块。它会提前向操作系统申请一批内存\n分成常用的规格管理起来，我们申请内存时，它会帮我们匹配到足够大、且最接近的规格。")]),s._v(" "),n("h4",{attrs:{id:"扩容规则第三步-将预估申请内存匹配到合适的内存规格"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#扩容规则第三步-将预估申请内存匹配到合适的内存规格"}},[s._v("#")]),s._v(" 扩容规则第三步：将预估申请内存匹配到合适的内存规格")]),s._v(" "),n("p",[s._v("在我们的例子中，预估容量为5，64位下就需要申请40字节存放扩容后的底层数组，而实际申请会匹配到48字节。\n"),n("strong",[s._v("那这么大的内存能装多少个元素呢？")])]),s._v(" "),n("p",[s._v("这个例子每个元素（int）占8字节，一共能装6个，这就是扩容后的容量了。")]),s._v(" "),n("h4",{attrs:{id:"小练习"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#小练习"}},[s._v("#")]),s._v(" 小练习")]),s._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[s._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"My"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"name"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"is"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("p",[s._v("a是string类型的slice，64位下每个元素占16字节，以Go1.16为例。\n"),n("strong",[s._v("第一步：")]),s._v("\n扩容前容量是3，添加一个元素，最少要扩容到4。\n原容量翻倍为6，大于4；\n且原容量和1024比，小于1024，所以直接翻倍，预估容量为6。")]),s._v(" "),n("p",[n("strong",[s._v("第二步：")]),s._v("\n预估容量乘以元素大小（6*16=96），等于96字节。")]),s._v(" "),n("p",[n("strong",[s._v("第三步：")]),s._v("\n96字节匹配到内存规格也是96字节。\n所以，最终扩容后容量为6。")])])}),[],!1,null,null,null);t.default=e.exports}}]);